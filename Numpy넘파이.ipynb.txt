{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 넘파이(NumPy)\n",
    "- NumPy는 행렬 연산에 특화된 라이브러리입니다.\n",
    "- 간단한 예를 통해서 NumPy의 장점을 확인해 봅시다.\n",
    "- 아나콘다 배포판을 설치한 경우 넘파이 모듈도 설치됩니다. 아나콘다 배포판을 설치하지 않은 경우 직접 넘파일 모듈을 설치해야 합니다."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- 파이썬 리스트에 정수 값들이 있을 때 리스트에 있는 값에 10을 곱해 새로운 리스트를 만들어봅시다"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[10, 20, 30]\n"
     ]
    }
   ],
   "source": [
    "data = [1,2,3]\n",
    "new_data = []\n",
    "\n",
    "for i in data: # 반복문을 사용해서 \n",
    "    new_data.append(i*10) # 각 원소에 10을 곱한 후 결과값을 new_data리스트 배열에 추가합니다\n",
    "    \n",
    "print(new_data)"
   ]
  },
  {
   "attachments": {
    "image.png": {
     "image/png": ""
    }
   },
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- 엑셀 프로그램을 사용한다면 첫번째 행에 대해서 수식입력후 마우스로 수식을 드래그하면 모든 데이터에 동일한 수식을 적용할 수 있습니다\n",
    "![image.png](attachment:image.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- 파이썬 리스트를 사용할 때 마치 엑셀처럼 단순히 곱셈 연산자를 사용해서 각 원소에 10을 곱한 결과 리스트를 만들 수 있다면 for 문을 사용할 필요가 없으니 편리할 것 같습니다"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]\n"
     ]
    }
   ],
   "source": [
    "data = [1,2,3]\n",
    "new_data = data*10\n",
    "print(new_data) # 결괏값을 살펴보면 우리가 예상한 것과 달리 제대로 값이 나오지 않는 것을 확인할 수 있습니다. \n",
    "#리스트에서 곱셈 연산은 리스트에 있는 값을 반복해줍니다."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- **파이썬의 리스트 대신 NumPy의 배열(array)을 사용하면 우리가 원하는 방식으로 구현할 수 있습니다.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[10 20 30]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np # : NumPy 모듈을 np라는 이름으로 임포트합니다.\n",
    "\n",
    "data =[1,2,3] # 데이터를 파이썬 리스트로 저장합니다. \n",
    "arr = np.array(data)\n",
    "# NumPy의 array 함수를 호출하여 파이썬 리스트를 NumPy 배열(ndarray)로 생성해줍니다\n",
    "data2 = arr*10 # 브로드캐스팅 기능을 통해 배열의 각 원소에 10을 곱한 값을 만들어줍니다\n",
    "print(data2) # cnffur"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- 어떤 종목의 5일간의 고가와 저가가 다음과 같다고 가정해봅시다.\n",
    "|날짜|고가|저가|\n",
    "|-----|-------|------|\n",
    "|2019-06-01|92,700|90,000|\n",
    "|2019-06-02|92,400|91,100|\n",
    "|2019-06-03|92,100|91,700|\n",
    "|2019-06-04|94,300|92,100|\n",
    "|2019-06-05|92,300|90,900|\n",
    "\n",
    "- 각 거래일별 고가와 저가의 차이를 계산하고자 할 때 \n",
    "- 파이썬의 기본 자료구조인 리스트를 사용하면 for 문을 사용해서 고가와 저가를 일자별로 계산해야 합니다."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- 데이터를 파이썬 리스트가 아니라 NumPy의 배열로 표현하면 다음 코드와 같이\n",
    "- '-'연산 하나로 각 날짜별로 차이 값을 쉽게 계산할 수 있습니다"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2700 1300  400 2200 1400]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "high = [92700, 92400, 92100, 94300, 92300]\n",
    "low = [90000, 91100, 91700, 92100, 90900]\n",
    "arr_high = np.array(high)\n",
    "arr_low = np.array(low)\n",
    "\n",
    "arr_diff = arr_high - arr_low\n",
    "print(arr_diff)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
